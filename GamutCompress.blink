kernel GamutCompression : public ImageComputationKernel<ePixelWise> {
  Image<eRead, eAccessPoint, eEdgeClamped> src;
  Image<eWrite> dst;

  param:
    float3 threshold;
    float shd_rolloff;
    float cyan;
    float magenta;
    float yellow;
    int method;
    bool invert;

  local:
  float3 thr;
  float3 lim;
  float pi;

  void init() {
    pi = 3.14159265359;

    // thr is the percentage of the core gamut to protect: the complement of threshold.
    thr = float3(1.0f-threshold.x, 1.0f-threshold.y, 1.0f-threshold.z);

    // lim is the max distance from the gamut boundary that will be compressed
    // 0 is a no-op, 1 will compress colors from a distance of 2.0 from achromatic to the gamut boundary
    // if method is Reinhard, use the limit as-is
    if (method == 1) {
      lim = float3(cyan+1.0f, magenta+1.0f, yellow+1.0f);
    } else {
      // otherwise, we have to bruteforce the value of limit 
      // such that lim is the value of x where y=1.0f
      // importantly, this runs once at the beginning of evaluation, NOT per-pixel!!!
      lim = float3(
        bisect(max(0.0001f, cyan)+1.0f, thr.x),
        bisect(max(0.0001f, magenta)+1.0f, thr.y),
        bisect(max(0.0001f, yellow)+1.0f, thr.z));
    }
  }

  // calculate hyperbolic tangent
  float tanh( float in) {
    float f = exp(2.0f*in);
    return (f-1.0f) / (f+1.0f);
  }

  // calculate inverse hyperbolic tangent
  float atanh( float in) {
    return log((1.0f+in)/(1.0f-in))/2.0f;
  }

  // compression function which gives the y=1 x intersect at y=0
  float f(float x, float k, float t) {
    if (method == 0) {
      // natural logarithm compression method
      return (exp((1.0f-t+t*log(1.0f-x)-x*t*log(1.0f-x))/(t*(1.0f-x))))*t+x*t-k;
    } else if (method == 1) {
      return k;
    } else if (method == 2) { 
      // natural exponent compression method
      return -log((-x+1.0f)/(t-x))*(-t+x)+t-k;
    } else if (method == 3) {
      // arctangent compression method
      return (2*tan( (pi*(1.0f-t))/(2.0f*(x-t)))*(x-t))/pi+t-k;
    } else if (method == 4) {
      // hyperbolic tangent compression method
      return atanh((1.0f-t)/(x-t))*(x-t)+t-k;
    }
  }

  int sign(float x) {
    return x == 0.0f ? 0.0f : x > 0.0f ? 1.0f : 0.0f;
  }

  float bisect(float k, float t) {
    // use a simple bisection algorithm to bruteforce the root of f
    // returns an approximation of the value of limit 
    // such that the compression function intersects y=1 at desired value k
    // this allows us to specify the max distance we will compress to the gamut boundary
    
    float a, b, c, y;
    float tol = 0.0001f; // accuracy of estimate
    int nmax = 100; // max iterations

    // set up reasonable initial guesses for each method given output ranges of each function
    if (method == 0) {
      // natural logarithm needs a limit between -inf (linear), and 1 (clip)
      a = -15.0f;
      b = 0.98f;
    } else if (method == 4) {
      // tanh needs more precision
      a = 1.000001f;
      b = 5.0f;
    } else {
      a = 1.0001f;
      b = 5.0f;
    }

    if (sign(f(a, k, t)) == sign(f(b, k, t))) {
      // bad estimate. return something close to linear
      if ((method == 0) || (method == 2)) {
        return -100.0f;
      } else {
        return 1.999999f;
      }
    }
    c = (a+b)/2.0f;
    y = f(c, k, t);
    if (fabs(y) <= tol) {
      return c; // lucky guess
    }

    int n = 1;
    while ((fabs(y) > tol) && (n <= nmax)) {
      if (sign(y) == sign(f(a, k, t))) {
        a = c;
      } else {
        b = c;
      }
      c = (a+b)/2.0f;
      y = f(c, k, t);
      n += 1;
    }
    return c;
  }


  // calculate compressed distance
  float compress(float dist, float lim, float t) {
    float cdist;
    if (dist < t) {
      cdist = dist;
    } else {
      if (method == 0) {
        // natural logarithm compression method: https://www.desmos.com/calculator/hmzirlw7tj
        // inspired by ITU-R BT.2446 http://www.itu.int/pub/R-REP-BT.2446-2019
        if (invert == 0) {
          cdist = t*log(dist/t-lim)-lim*t*log(dist/t-lim)+t-t*log(1.0f-lim)+lim*t*log(1.0f-lim);
        } else {
          cdist = exp((dist-t+t*log(1.0f-lim)-lim*t*log(1.0f-lim))/(t*(1.0f-lim)))*t+lim*t;
        }
      } else if (method == 1.0f) {
        // simple Reinhard type compression method: https://www.desmos.com/calculator/lkhdtjbodx
        if (invert == 0) {
          cdist = t+1.0f/(1.0f/(dist-t)+1.0f/(1.0f-t)-1.0f/(lim-t));
        } else {
          cdist = t+1.0f/(1.0f/(dist-t)-1.0f/(1.0f-t)+1.0f/(lim-t));
        }
      } else if (method == 2) {
        // natural exponent compression method: https://www.desmos.com/calculator/s2adnicmmr
        if (invert == 0) {
          cdist = lim-(lim-t)*exp(-(((dist-t)*((1.0f*lim)/(lim-t))/lim)));
        } else {
          cdist = -log((dist-lim)/(t-lim))*(-t+lim)/1.0f+t;
        }
      } else if (method == 3) {
        // arctangent compression method: https://www.desmos.com/calculator/h96qmnozpo
        if (invert == 0) {
          cdist = t+(lim-t)*2/pi*atan(pi/2*(dist-t)/(lim-t));
        } else {
          cdist = t+(lim-t)*2/pi*tan(pi/2*(dist-t)/(lim-t));
        }
      } else if (method == 4) {
        // hyperbolic tangent compression method: https://www.desmos.com/calculator/xiwliws24x
        if (invert == 0) {
          cdist = t+(lim-t)*tanh(((dist-t)/(lim-t)));
        } else {
          cdist = t+(lim-t)*atanh(dist/(lim-t)-t/(lim-t));
        }
      }
    }
    return cdist;
  }


  void process() {
    // source pixels
    SampleType(src) rgba = src();
    float3 rgb = float3(rgba.x, rgba.y, rgba.z);

    // achromatic axis 
    float ach = max(rgb.x, max(rgb.y, rgb.z));

    // achromatic with shadow rolloff below shd_rolloff threshold
    float ach_shd = 1.0f-( (1.0f-ach)<(1.0f-shd_rolloff)?(1.0f-ach):(1.0f-shd_rolloff)+shd_rolloff*tanh((((1.0f-ach)-(1.0f-shd_rolloff))/shd_rolloff)));

    // distance from the achromatic axis for each color component aka inverse rgb ratios
    // distance is normalized by achromatic, so that 1.0f.0 is at gamut boundary, avoid 0 div
    float3 dist = ach_shd == 0 ? float3(0.0f, 0.0f, 0.0f) : (ach-rgb)/ach_shd;

    // compress distance with user controlled parameterized shaper function
    float3 cdist = float3(
      compress(dist.x, lim.x, thr.x),
      compress(dist.y, lim.y, thr.y),
      compress(dist.z, lim.z, thr.z));

    // recalculate rgb from compressed distance and achromatic
    // effectively this scales each color component relative to achromatic axis by the compressed distance
    float3 crgb = ach-cdist*ach_shd;

    // write to output
    dst() = float4(crgb.x, crgb.y, crgb.z, rgba.w);
  }
};