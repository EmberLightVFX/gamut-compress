kernel GamutCompression : public ImageComputationKernel<ePixelWise> {
  Image<eRead, eAccessPoint, eEdgeClamped> src;
  Image<eWrite> dst;

  param:
    float3 threshold;
    float p;
    float shd_rolloff;
    float cyan;
    float magenta;
    float yellow;
    bool invert;

  local:
    float3 thr;
    float3 lim;

  void init() {
    // thr is the percentage of the core gamut to protect: the complement of threshold.
    thr = float3(1.0f-threshold.x, 1.0f-threshold.y, 1.0f-threshold.z);

    // lim is the distance beyond the gamut boundary that will be compressed to the gamut boundary.
    // lim = 0.2 will compress from a distance of 1.2 from achromatic to 1.0 (the gamut boundary).
    lim = float3(cyan+1.0f, magenta+1.0f, yellow+1.0f);
  }

  // calculate hyperbolic tangent
  float tanh( float in) {
    float f = exp(2.0f*in);
    return (f-1.0f)/(f+1.0f);
  }

  // calculate compressed distance
  float compress(float x, float l, float t) {
    float cdist;
    float s = (l-t)/pow(pow((1.0f-t)/(l-t),-p)-1.0f,1.0f/p); // calc y=1 intersect
    if (l < 1.0001) {
      return x; // disable compression, avoid nan
    }
    if (x < t) {
      cdist = x;
    } else {
      if (invert == 0) {
        cdist = t+s*((x-t)/s)/(pow(1.0f+pow((x-t)/s,p),1.0f/p)); // compress
      } else {
        if (x > (t + s)) {
          cdist = x; // avoid singularity
        }
        cdist = t+s*pow(-(pow((x-t)/s,p)/(pow((x-t)/s,p)-1.0f)),1.0f/p); // uncompress
      }
    }
    return cdist;
  }

  void process() {
    // source pixels
    SampleType(src) rgba = src();
    float3 rgb = float3(rgba.x, rgba.y, rgba.z);

    // achromatic axis 
    float ach = max(rgb.x, max(rgb.y, rgb.z));

    // achromatic with shadow rolloff below shd_rolloff threshold
    float ach_shd = 1.0f-( (1.0f-ach)<(1.0f-shd_rolloff)?(1.0f-ach):
      (1.0f-shd_rolloff)+shd_rolloff*tanh((((1.0f-ach)-(1.0f-shd_rolloff))/shd_rolloff)));

    // distance from the achromatic axis for each color component aka inverse rgb ratios
    // distance is normalized by achromatic, so that 1.0f is at gamut boundary. avoid 0 div
    float3 dist = ach_shd == 0 ? float3(0.0f, 0.0f, 0.0f) : (ach-rgb)/ach_shd;

    // compress distance with parameterized compression function
    float3 cdist = float3(
      compress(dist.x, lim.x, thr.x),
      compress(dist.y, lim.y, thr.y),
      compress(dist.z, lim.z, thr.z));

    // recalculate rgb from compressed distance and achromatic
    // effectively this scales each color component relative to achromatic axis by the compressed distance
    float3 crgb = ach-cdist*ach_shd;

    // write to output
    dst() = float4(crgb.x, crgb.y, crgb.z, rgba.w);
  }
};