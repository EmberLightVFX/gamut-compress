--[[--
-----------------------------

Gamut Compress is a tool to compress out of gamut colors back into gamut.
Written by Jed Smith with lots of help from the ACES Gamut Mapping Virtual Working Group
https://github.com/jedypod/gamut-compress
https://community.acescentral.com/t/rgb-saturation-gamut-mapping-approach-and-a-comp-vfx-perspective
https://community.acescentral.com/c/aces-development-acesnext/vwg-aces-gamut-mapping-working-group

Initial version of this Fuse written by Jacob Danell. Thank you! :D


------------------
Documenation

Threshold
Percentage of the gamut to affect. 
If threshold is 0.2, the inner 80% of the gamut will be unaffected 
and out of gamut values will be compressed into the outer 20% of the gamuts color volume.

Power
Adjust the exponent of the compression function. 1.0f = Reinhard.
Higher values have C2 continuity and result in a more
"aggressive" curve, which preserves more color purity / "saturation".
Be wary of high values if accurate inversion is important to you.

Shadow Rolloff
Reduce gamut compression in dark areas below specified value.
Helps reduce invertability issues in negative values from grain.

Max Distance
Per color component control to specify what distance will be compressed to the gamut boundary. 
For example, a value of cyan=0.2 will map colors with a distance of 
red=1.2 from the achromatic axis to red=1.0, which is the gamut boundary.

Direction
Specifies whether to apply or inverse the gamut compression operation.


-------------------------
Installation

To install this fuse for Blackmagic Fusion Studio, copy the file to your UserData Path Map folder:

Linux:
  ~/.fusion/BlackmagicDesign/Fusion/Fuses
OSX: 
  ~/Library/Application Support/Blackmagic Design/Fusion
Windows:
  %appdata%\Blackmagic Design\Fusion\Fuses


For the Fusion page in Resolve Lite or Resolve Studio use these UserData folders:

Linux: 
  ~/.local/share/DaVinciResolve/Fusion/Fuses
OSX:
  ~/Library/Application Support/Blackmagic Design/DaVinci Resolve/Fusion
Windows:
  %appdata%\Blackmagic Design\DaVinci Resolve\Fusion\Fuses


--]]--


FuRegisterClass("GamutCompress", CT_Tool, {
  REGS_Name = "Gamut Compress",
  REGS_Category = "Color",
  REGS_OpIconString = "",
  REGS_OpDescription = "Compress out of gamut colors back into gamut.",
  REG_Fuse_NoEdit = false,
  REG_Fuse_NoReload = false,
  REG_SupportsDoD = false,
})


function Create()
  InHexagonal = self:AddInput("hexagonal", "hexagonal", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_MinAllowed = 0.0,
    INP_MaxAllowed = 1.0,
    INP_Default = 0.0,
  })
    
  InThresholdR = self:AddInput("threshold_r", "threshold_r", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.2,
    INP_MinAllowed = 0.0001,
    INP_MaxScale = 0.6,
  })

  InThresholdG = self:AddInput("threshold_g", "threshold_g", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.2,
    INP_MinAllowed = 0.0001,
    INP_MaxScale = 0.6,
  })

  InThresholdB = self:AddInput("threshold_b", "threshold_b", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.2,
    INP_MinAllowed = 0.0001,
    INP_MaxScale = 0.6,
  })

  InPower = self:AddInput("power", "power", {
      LINKID_DataType = "Number",
      INPID_InputControl = "SliderControl",
      INP_Default = 1.2,
      INP_MinAllowed = 1.0,
      INP_MaxScale = 5.0,
  })
  
  InShdRolloff = self:AddInput("shd rolloff", "shd rolloff", {
      LINKID_DataType = "Number",
      INPID_InputControl = "SliderControl",
      INP_Default = 0.03,
      INP_MinAllowed = 0.0,
      INP_MaxScale = 0.1,
  })
  
  self:BeginControlNest("max distance limits", "max distance limits", true, {})
  
  InCyan = self:AddInput("cyan", "cyan", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.09,
    INP_MinAllowed = 0.0,
    INP_MaxScale = 1.0,
  })
  
  InMagenta = self:AddInput("magenta", "magenta", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.24,
    INP_MinAllowed = 0.0,
    INP_MaxScale = 1.0,
  })
  
  InYellow = self:AddInput("yellow", "yellow", {
    LINKID_DataType = "Number",
    INPID_InputControl = "SliderControl",
    INP_Default = 0.12,
    INP_MinAllowed = 0.0,
    INP_MaxScale = 1.0,
  })
  
  self:EndControlNest()

  InInvert = self:AddInput("invert", "invert", {
    LINKID_DataType = "Number",
    INPID_InputControl = "CheckboxControl",
    INP_MinAllowed = 0.0,
    INP_MaxAllowed = 1.0,
    INP_Default = 0.0,
  })

  InImage = self:AddInput("Input", "Input", {
    LINKID_DataType = "Image",
    LINK_Main = 1,
  })

  OutImage = self:AddOutput("Output", "Output", {
   LINKID_DataType = "Image",
   LINK_Main = 1,
  })
end


function Process(req)
  local src = InImage:GetValue(req)
  local dst = Image{ IMG_Like = src, IMG_DeferAlloc = true }

  if not req:IsPreCalc() then
    local node = DVIPComputeNode(req, "SolidKernel", SolidKernel, "SolidParams", SolidParams)
    local params = node:GetParamBlock(SolidParams)

    params.hexagonal = InHexagonal:GetValue(req).Value
    params.threshold_r = InThresholdR:GetValue(req).Value
    params.threshold_g = InThresholdG:GetValue(req).Value
    params.threshold_b = InThresholdB:GetValue(req).Value
    params.power = InPower:GetValue(req).Value
    params.shd_rolloff = InShdRolloff:GetValue(req).Value
    params.cyan = InCyan:GetValue(req).Value
    params.magenta = InMagenta:GetValue(req).Value
    params.yellow = InYellow:GetValue(req).Value
    params.invert = InInvert:GetValue(req).Value
    params.srcCompOrder = src:IsMask() and 1 or 15
 
    node:SetParamBlock(params)
 
    node:AddInput("src", src)
    node:AddOutput("dst", dst)
 
    local ok = node:RunSession(req)
 
    if not ok then
        dst = nil
    end

  end

  OutImage:Set(req, dst)
end


SolidParams = [[
  int hexagonal;
  float threshold_r;
  float threshold_g;
  float threshold_b;
  float power;
  float shd_rolloff;
  float cyan;
  float magenta;
  float yellow;
  int invert;
  int srcCompOrder;
]]

 
SolidKernel = [[
  // calculate compressed distance
  __DEVICE__ float compress(float x, float l, float t, float p, bool invert) {
    float cdist;
    // power(p) compression function plot https://www.desmos.com/calculator/54aytu7hek
    float s = (l-t)/_powf(_powf((1.0f-t)/(l-t),-p)-1.0f,1.0f/p); // calc y=1 intersect
    if (l < 1.0001f) {
      return x; // disable compression, avoid nan
    }
    if (x < t) {
      cdist = x;
    } 
    else {
      if (invert == 0) {
        cdist = t+s*((x-t)/s)/(_powf(1.0f+_powf((x-t)/s,p),1.0f/p)); // compress
      } else {
        if (x > (t + s)) {
          cdist = x; // avoid singularity
        }
        cdist = t+s*_powf(-(_powf((x-t)/s,p)/(_powf((x-t)/s,p)-1.0f)),1.0f/p); // uncompress
      }
    }
    return cdist;
  }

  __KERNEL__ void SolidKernel(__CONSTANTREF__ SolidParams *params, __TEXTURE2D__ src, __TEXTURE2D_WRITE__ dst)
  {
    DEFINE_KERNEL_ITERATORS_XY(x, y);
    float4 rgb = _tex2DVecN(src, x, y, params->srcCompOrder);

    // thr is the percentage of the core gamut to protect: the complement of threshold.
    float3 thr = make_float3(
      1.0f-_fmaxf(0.0001f, params->threshold_r),
      1.0f-_fmaxf(0.0001f, params->threshold_g),
      1.0f-_fmaxf(0.0001f, params->threshold_b));
    
    // lim is the max distance from the gamut boundary that will be compressed
    // 0 is a no-op, 1 will compress colors from a distance of 2.0 from achromatic to the gamut boundary
    // if method is Reinhard, use the limit as-is
    float3 lim;
    lim = make_float3(params->cyan+1.0f, params->magenta+1.0f, params->yellow+1.0f);
    
    // achromatic axis 
    float ach = _fmaxf(rgb.x, _fmaxf(rgb.y, rgb.z));

    // achromatic with shadow rolloff below shd_rolloff threshold
    float ach_shd = 1.0f-((1.0f-ach)<(1.0f-params->shd_rolloff)?(1.0f-ach):(1.0f-params->shd_rolloff)+params->shd_rolloff*_tanhf((((1.0f-ach)-(1.0f-params->shd_rolloff))/params->shd_rolloff)));

    // distance from the achromatic axis for each color component aka inverse rgb ratios
    float3 dist;
    dist.x = ach_shd == 0.0f ? 0.0f : (ach-rgb.x)/ach_shd;
    dist.y = ach_shd == 0.0f ? 0.0f : (ach-rgb.y)/ach_shd;
    dist.z = ach_shd == 0.0f ? 0.0f : (ach-rgb.z)/ach_shd;

    // compress distance with user controlled parameterized shaper function
    float sat;
    float3 csat, cdist;
    if (params->hexagonal) {
      // Based on Nick Shaw's variation on the gamut mapping algorithm 
      // https://community.acescentral.com/t/a-variation-on-jeds-rgb-gamut-mapper/3060
      sat = _fmaxf(dist.x, _fmaxf(dist.y, dist.z));
      csat = make_float3(
        compress(sat, lim.x, thr.x, params->power, params->invert),
        compress(sat, lim.y, thr.y, params->power, params->invert),
        compress(sat, lim.z, thr.z, params->power, params->invert));
      cdist = sat == 0.0f ? dist : make_float3(
        dist.x * csat.x / sat,
        dist.y * csat.y / sat,
        dist.z * csat.z / sat);
    } else {
      cdist = make_float3(
        compress(dist.x, lim.x, thr.x, params->power, params->invert),
        compress(dist.y, lim.y, thr.y, params->power, params->invert),
        compress(dist.z, lim.z, thr.z, params->power, params->invert));
    }

    // recalculate rgb from compressed distance and achromatic
    // effectively this scales each color component relative to achromatic axis by the compressed distance
    float4 crgb = make_float4(
      ach-cdist.x*ach_shd,
      ach-cdist.y*ach_shd,
      ach-cdist.z*ach_shd,
      rgb.w);

    _tex2DVec4Write(dst, x, y, crgb);
  }
]]